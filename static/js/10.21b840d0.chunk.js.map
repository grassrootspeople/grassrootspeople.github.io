{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/LowbWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/Home.tsx","hooks/useLastUpdated.ts","hooks/usePreviousValue.ts","hooks/useTokenBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","Block","styled","div","CakeHarvestBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","value","lineHeight","CardBusdValue","color","style","LowbWalletBalance","cakeBalance","useTokenBalance","busdBalance","getBalanceNumber","decimals","fontSize","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","scale","mb","src","alt","width","height","id","disabled","length","onClick","count","UnlockButton","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard","useLastUpdated","Date","now","lastUpdated","setStateLastUpdated","previousLastUpdated","usePreviousValue","setLastUpdated","ref","useRef","current","useGetBnbBalance","BIG_ZERO","web3","useWeb3","eth","getBalance","walletBalance","fetchBalance","refresh","tokenAddress","contract","getBep20Contract","methods","balanceOf","call","prefix","bold","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","props"],"mappings":"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","file":"static/js/10.21b840d0.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CakeHarvestBalance = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning)\n    if (earningNumber.eq(0)) {\n      return accum\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst LowbWalletBalance = () => {\n  const { t } = useTranslation()\n  const lowbContractAddress = '0x843d4a358471547f51534e3e51fae91cb4dc3f28'\n  const cakeBalance = useTokenBalance(lowbContractAddress)\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {!cakePriceBusd.eq(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default LowbWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport LowbWalletBalance from './LowbWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/lowb.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{t('GRP to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{t('GRP in Wallet')}:</Label>\n          <LowbWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? t('Collecting GRP')\n                : t('Harvest all (%count%)', {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\n// import LotteryCard from 'views/Home/components/LotteryCard'\n// import CakeStats from 'views/Home/components/CakeStats'\n// import TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\n// import EarnAPRCard from 'views/Home/components/EarnAPRCard'\n// import EarnAssetCard from 'views/Home/components/EarnAssetCard'\n// import WinCard from 'views/Home/components/WinCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url(''), url('');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 12;\n    }\n  }\n`\n\n// const CTACards = styled(BaseLayout)`\n//   align-items: start;\n//   margin-bottom: 32px;\n\n//   & > div {\n//     grid-column: span 6;\n//   }\n\n//   ${({ theme }) => theme.mediaQueries.sm} {\n//     & > div {\n//       grid-column: span 8;\n//     }\n//   }\n\n//   ${({ theme }) => theme.mediaQueries.lg} {\n//     & > div {\n//       grid-column: span 4;\n//     }\n//   }\n// `\n\nconst Home: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\n          {t('Grassroots People Swap')}\n        </Heading>\n        <Text>{t('The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          {/* <LotteryCard /> */}\n        </Cards>\n        {/* <CTACards>\n          <EarnAPRCard />\n          <EarnAssetCard />\n          <WinCard />\n        </CTACards> */}\n        {/* <Cards>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards> */}\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n"],"sourceRoot":""}