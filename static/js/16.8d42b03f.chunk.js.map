{"version":3,"sources":["components/layout/Flex.tsx","utils/latinise.ts","components/PageHeader/PageHeader.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useApprove.ts","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","components/ApyCalculatorModal/index.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","utils/apr.ts","utils/callHelpers.ts","hooks/usePersistState.ts","hooks/useHarvest.ts","components/Select/Select.tsx"],"names":["FlexLayout","styled","div","Latinise","latin_map","τ","Τ","latinise","input","replace","x","Outer","Box","theme","background","colors","gradients","bubblegum","Inner","Container","PageHeader","children","props","Wrapper","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","aria-label","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","href","name","CoreTag","variant","outline","startIcon","width","mr","CommunityTag","DualTag","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","height","flexDirection","split","useApprove","lpContract","dispatch","useAppDispatch","account","useWeb3React","masterChefContract","useMasterchef","onApprove","useCallback","a","approve","tx","fetchFarmUserDataAsync","useStake","pid","onStake","amount","stake","txHash","console","info","useUnstake","onUnstake","unstake","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","l","React","Children","toArray","length","map","child","i","StyledTokenInput","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","style","position","pl","fontSize","balance","balanceNumber","Number","toLocaleString","undefined","maximumFractionDigits","displayBalance","pattern","inputMode","step","min","placeholder","scale","external","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","BigNumber","fullBalanceNumber","handleChange","e","currentTarget","validity","valid","handleSelectMax","title","disabled","isFinite","eq","gt","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","location","useLocation","stakedBalanceNumber","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","some","item","pathname","includes","HarvestAction","earnings","onReward","useHarvest","cakePrice","usePriceCakeBusd","rawEarningsBalance","earningsBusd","multipliedBy","toNumber","CardBusdValue","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","getBep20Contract","handleApprove","error","textTransform","pr","mt","UnlockButton","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","performanceFee","timesCompounded","aprAsDecimal","daysAsDecimalOfYear","principal","finalAmount","parseFloat","toFixed","getRoi","amountEarned","amountInvested","Grid","GridItem","ApyCalculatorModal","apr","linkLabel","linkHref","earningTokenSymbol","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","maxWidth","freq","fee","ApyButton","onPresentApyModal","event","stopPropagation","ml","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","card","isPromotedFarm","radii","Divider","borderColor","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","liquidity","farmAPR","liquidityUrlPathParts","quoteToken","address","token","BASE_ADD_LIQUIDITY_URL","isCommunity","display","CardActionsContainer","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","useEffect","timeoutId","setTimeout","clearTimeout","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","Title","Subtle","ActionContent","Staked","earningsBigNumber","isZero","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","current","marginBottom","marginTop","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","dual","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","InputWrapper","SearchInput","onChangeCallback","setToggled","searchText","setSearchText","debouncedOnChange","debounce","target","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","setViewMode","sortOption","setSortOption","prices","useGetApiPrices","fastRefresh","useRefresh","isArchived","isInactive","stakedOnly","setStakedOnly","setLoadArchivedFarmsData","fetchFarmsPublicDataAsync","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","times","poolWeight","cakePriceUsd","poolLiquidityUsd","CAKE_PER_BLOCK","BLOCKS_PER_YEAR","isNaN","getFarmApr","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","Page","checked","Select","options","option","marginLeft","sort","b","exact","renderContent","methods","ethers","constants","MaxUint256","send","from","enterStaking","DEFAULT_TOKEN_DECIMAL","toString","gas","on","transactionHash","deposit","sousStake","sousChefContract","BIG_TEN","pow","sousStakeBnb","leaveStaking","withdraw","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","harvest","soushHarvest","soushHarvestBnb","BIG_ZERO","initialValue","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","farmPid","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","DropDownHeader","inputSecondary","DropDownListContainer","zIndices","dropdown","DropDownContainer","isOpen","boxShadow","DropDownList","ul","ListItem","li","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","offsetWidth","offsetHeight"],"mappings":"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","file":"static/js/16.8d42b03f.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  translationId: number\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    translationId: 999,\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    translationId: 999,\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        <Text>{totalValueFormatted}</Text>\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t(`Get ${lpLabel}`, { name: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon } from '@pancakeswap/uikit'\n\nconst CoreTag = (props) => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = (props) => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = (props) => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Binance\n  </Tag>\n)\n\nconst DualTag = (props) => (\n  <Tag variant=\"textSubtle\" outline {...props}>\n    Dual\n  </Tag>\n)\n\nconst ManualPoolTag = (props) => (\n  <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Manual\n  </Tag>\n)\n\nconst CompoundingPoolTag = (props) => (\n  <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n    Auto\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.jpg`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmergencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceNumber = Number(balance)\n    if (balanceNumber > 0 && balanceNumber < 0.0001) {\n      return balanceNumber.toLocaleString(undefined, { maximumFractionDigits: 20 })\n    }\n    return balanceNumber.toLocaleString()\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">\n            {t('Balance')}: {displayBalance(max)}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          No tokens to stake:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('get')} {symbol}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get')} {tokenName}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React, { useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const location = useLocation()\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceNumber.toLocaleString()\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const cakePrice = usePriceCakeBusd()\n\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\n  const displayBalance = rawEarningsBalance.toLocaleString()\n  const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\n        {displayBalance}\n        {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />}\n      </Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { provider as ProviderType } from 'web3-core'\nimport BigNumber from 'bignumber.js'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApprove } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  provider?: ProviderType\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const web3 = useWeb3()\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          LOWB\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","export const tokenEarnedPerThousandDollarsCompounding = ({\n  numberOfDays,\n  farmApr,\n  tokenPrice,\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  let aprAsDecimal = farmApr / 100\n\n  if (performanceFee) {\n    // Reduce the APR by the % performance fee\n    const feeRelativeToApr = (farmApr / 100) * performanceFee\n    const aprAfterFee = farmApr - feeRelativeToApr\n    aprAsDecimal = aprAfterFee / 100\n  }\n\n  const daysAsDecimalOfYear = numberOfDays / 365\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\n  const principal = 1000 / tokenPrice\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\n  const interestEarned = finalAmount - principal\n\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\n}\n\nexport const getRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'LOWB',\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {t('Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {t('ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {earningTokenSymbol} {t('per')} $1000\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Box mb=\"28px\" maxWidth=\"280px\">\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t(\n            `Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.`,\n            { freq: compoundFrequency.toLocaleString() },\n          )}\n        </Text>\n        {performanceFee > 0 && (\n          <Text mt=\"14px\" fontSize=\"12px\" color=\"textSubtle\">\n            {t(`All estimated rates take into account this pool's %fee%% performance fee`, { fee: performanceFee })}\n          </Text>\n        )}\n      </Box>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={`${t('Get')} ${lpLabel}`}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      linkHref={addLiquidityUrl}\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { Farm } from 'state/types'\nimport { provider as ProviderType } from 'web3-core'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`  \n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 32px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  provider?: ProviderType\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n\n  const totalValueFormatted = farm.liquidity\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = 'LOWB'\n\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const isPromotedFarm = farm.token.symbol === 'LOWB'\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        farmImage={farmImage}\n        tokenSymbol={farm.token.symbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text, Image } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  image: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          {t('FARMING')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <IconImage src={`/images/farms/${image}.jpg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <div>\n      {t('The multiplier represents the amount of LOWB rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 LOWB per block, a 40x farm would be getting 1000 LOWB per block.')}\n    </div>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity = liquidity ? (\n    `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n  ) : (\n    <Skeleton width={60} />\n  )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('The total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { Button, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useCountUp } from 'react-countup'\n\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = 0\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceNumber(earningsBigNumber)\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { t } = useTranslation()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>LOWB </Title>\n        <Subtle>{t('EARNED')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\n        </div>\n        <Button\n          disabled={!earnings || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser } from 'state/hooks'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useApprove } from 'hooks/useApprove'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport useWeb3 from 'hooks/useWeb3'\n\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const web3 = useWeb3()\n  const location = useLocation()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceNumber.toLocaleString()\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('START FARMING')}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{lpSymbol} </Title>\n            <Subtle>{t('STAKED')}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('STAKE')} </Subtle>\n          <Title>{lpSymbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('START FARMING')}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{t('ENABLE FARM')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = `https://bscscan.com/address/${lpAddress}`\n  // const info = `https://pancakeswap.info/pair/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n              {t(`Get ${lpLabel}`, { name: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        {/* <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal> */}\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React, { useState, useMemo } from 'react'\nimport { Input } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport debounce from 'lodash/debounce'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 234px;\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback }) => {\n  const [toggled, setToggled] = useState(false)\n  const [searchText, setSearchText] = useState('')\n\n  const debouncedOnChange = useMemo(\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\n    [onChangeCallback],\n  )\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value)\n    debouncedOnChange(e)\n  }\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          value={searchText}\n          onChange={onChange}\n          placeholder=\"Search farms\"\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport { useAppDispatch } from 'state'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport { getAddress } from 'utils/addressHelpers'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport { fetchFarmsPublicDataAsync, setLoadArchivedFarmsData } from 'state/farms'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport SearchInput from './components/SearchInput'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'pancake_farm_view')\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const prices = useGetApiPrices()\n\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n\n  useEffect(() => {\n    // Makes the main scheduled fetching to request archived farms data\n    dispatch(setLoadArchivedFarmsData(isArchived))\n\n    // Immediately request data for archived farms so users don't have to wait\n    // 60 seconds for public data and 10 seconds for user data\n    if (isArchived) {\n      dispatch(fetchFarmsPublicDataAsync())\n      if (account) {\n        dispatch(fetchFarmUserDataAsync(account))\n      }\n    }\n  }, [isArchived, dispatch, account])\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !prices) {\n          return farm\n        }\n\n        const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]?prices[getAddress(farm.quoteToken.address).toLowerCase()]:cakePrice\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, prices, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake Liquidity Pool (LP) tokens to earn.')}\n        </Heading>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text>SORT BY</Text>\n              <Select\n                options={[\n                  {\n                    label: 'Hot',\n                    value: 'hot',\n                  },\n                  {\n                    label: 'APR',\n                    value: 'apr',\n                  },\n                  {\n                    label: 'Multiplier',\n                    value: 'multiplier',\n                  },\n                  {\n                    label: 'Earned',\n                    value: 'earned',\n                  },\n                  {\n                    label: 'Liquidity',\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text>SEARCH</Text>\n              <SearchInput onChange={handleChangeQuery} />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <div ref={loadMoreRef} />\n        <StyledImage src=\"/images/GRP.jpg\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n","import BigNumber from 'bignumber.js'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK } from 'config'\n\n/**\n * Get the APR value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APR is NaN or infinite.\n */\nexport const getPoolApr = (\n  stakingTokenPrice: number,\n  rewardTokenPrice: number,\n  totalStaked: number,\n  tokenPerBlock: number,\n): number => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\n/**\n * Get farm APR value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\nexport const getFarmApr = (poolWeight: BigNumber, cakePriceUsd: BigNumber, poolLiquidityUsd: BigNumber): number => {\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\n  const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\nexport default null\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 200000, value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 200000, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useEffect, useState } from 'react'\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, localStorageKey: string) => {\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? JSON.parse(valueFromLS) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(value))\n  }, [value, localStorageKey])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Text } from '@pancakeswap/uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\n  cursor: pointer;\n  width: ${({ width }) => width}px;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps {\n  options: OptionProps[]\n  onChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\n  const containerRef = useRef(null)\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(options[0])\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\n\n  const toggling = () => setIsOpen(!isOpen)\n\n  const onOptionClicked = (option: OptionProps) => () => {\n    setSelectedOption(option)\n    setIsOpen(false)\n\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  useEffect(() => {\n    setContainerSize({\n      width: dropdownRef.current.offsetWidth, // Consider border\n      height: dropdownRef.current.offsetHeight,\n    })\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\n      {containerSize.width !== 0 && (\n        <DropDownHeader onClick={toggling}>\n          <Text>{selectedOption.label}</Text>\n        </DropDownHeader>\n      )}\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option) =>\n            option.label !== selectedOption.label ? (\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n"],"sourceRoot":""}